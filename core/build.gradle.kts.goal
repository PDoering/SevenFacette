

plugins {
    kotlin("multiplatform") version "1.3.71"
    kotlin("plugin.serialization") version "1.3.71"
    id("maven-publish")
    id("com.jfrog.bintray") version "1.8.4"
    id("com.github.johnrengelman.shadow") version "2.0.2"
}

var GROUP_ID = "de.p7s1.qa.sevenfacette"
var ARTIFACT_ID = "core"
//var BINTRAY_REPOSITORY = "sevenfacette-jvm"
/*
That is only for testing!!!
 */
var LIBRARY_VERSION_NAME=0.6 // The current version of your library. You will need to update this value whenever you upload a new release. For example: 1.0
version = "0.7.0"
group = "de.p7s1.qa.sevenfacette"
//var version = System.properties['VERSION']
//version = version.toString().substring(1,6)
//LIBRARY_VERSION_NAME=version.toString().substring(0,3)

//group = "de.p7s1.qa.sevenfacette"
//version = "1.0.0"



repositories {
    mavenCentral()
    jcenter()
    maven(url = "https://dl.bintray.com/aakira/maven")
    maven(url = "https://jitpack.io")
    maven(url = "https://kotlin.bintray.com/kotlinx")
}
kotlin {
    jvm {
        compilations.all {
            kotlinOptions.jvmTarget = "1.8"
        }
    }
    js {
        nodejs {
        }
    }
    sourceSets {
        val commonMain by getting {
            dependencies {
                implementation("org.jetbrains.kotlin:kotlin-stdlib")
                implementation("org.jetbrains.kotlin:kotlin-stdlib-common")
                implementation("org.postgresql:postgresql:42.2.5")
                implementation("io.ktor:ktor-client:1.3.0")
                implementation("io.ktor:ktor-client-json:1.3.0")
                implementation("io.ktor:ktor-client-core:1.3.0")
                implementation("io.ktor:ktor-client-auth:1.3.0")
                implementation("io.ktor:ktor-client-apache:1.3.0")
                implementation("io.ktor:ktor-client-jackson:1.3.0")
                implementation("org.jetbrains.kotlin:kotlin-reflect:1.3.0")
                implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.0.1")

                //implementation("org.jetbrains.kotlinx:kotlinx-serialization-runtime:0.20.0-1.4-M2")
                implementation("org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:0.14.0")
                //implementation("org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:0.20.0")
            }
        }
        val commonTest by getting {
            dependencies {
                implementation(kotlin("test-common"))
                implementation(kotlin("test-annotations-common"))
            }
        }
        val jvmMain by getting {
            dependencies {
                api("org.jetbrains.exposed:exposed-core:0.20.1")
                api("com.charleskorn.kaml:kaml:0.17.0")
                implementation("com.jayway.jsonpath:json-path:2.4.0")
                implementation("org.skyscreamer:jsonassert:1.5.0")
                implementation("org.apache.kafka:kafka-clients:2.0.0")
                implementation("org.apache.avro:avro:1.9.2")
                implementation("io.ktor:ktor-client-json-jvm:1.3.0")
                implementation("io.ktor:ktor-client-core-jvm:1.3.0")
                implementation("io.ktor:ktor-client-apache:1.3.0")
                implementation("io.ktor:ktor-client-auth-jvm:1.3.0")

                //implementation("org.jetbrains.kotlin:kotlin-reflect:1.4.0")
                //implementation("org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:0.14.0")
                //implementation("org.jetbrains.kotlinx:kotlinx-serialization-runtime:0.20.0-1.4-M2")
                implementation("org.jetbrains.kotlinx:kotlinx-serialization-runtime:0.14.0")

                //implementation fileTree(dir: 'lib', include: ['ifxjdbc.jar'])
            }
        }
        val jvmTest by getting {
            dependencies {
                implementation(kotlin("test-junit"))
            }
        }
        val jsMain by getting {
            dependencies {
                implementation("org.jetbrains.kotlin:kotlin-stdlib-js")
                implementation("io.ktor:ktor-client-js:1.3.0")
                implementation("io.ktor:ktor-client-core-js:1.3.0")
                implementation("io.ktor:ktor-client-json-js:1.3.0")
                implementation("io.ktor:ktor-client-auth-js:1.3.0")
                implementation("org.jetbrains.kotlin:kotlin-reflect:1.4.0")

                //implementation("org.jetbrains.kotlinx:kotlinx-serialization-runtime-js:0.14.0")
                implementation("org.jetbrains.kotlinx:kotlinx-serialization-runtime-js:0.14.0")
                //implementation("org.jetbrains.kotlinx:kotlinx-serialization-runtime:0.20.0-1.4-M2")

                //implementation (npm( "node-fetch", "^2.6.0"))
                //implementation (npm( "abort-controller", "^3.0.0"))
            }
        }
        val jsTest by getting
    }
}




bintray {
    //user = System.getenv("JFROG_ACTOR")
    user = "p7s1qa"
    //key = System.getenv("JFROG_TOKEN")
    key = "257b6da00e1e59ea183f7183f66b7cd6863c016c"
    //user = project.findProperty("bintrayUser").toString()
    //key = project.findProperty("bintrayKey").toString()
    publish = true
    //publish = !project.version.toString().endsWith("SNAPSHOT")

    pkg.apply {
        repo = "sevenfacette-jvm"
        name = ARTIFACT_ID
        setLicenses("MIT")
        //setLabels("kotlin", "faker", "testing", "test-automation", "data", "generation")
        version.apply {
            name = "$LIBRARY_VERSION_NAME"
            released = Date().toString()
            vcsTag = "v$version"
        }
    }
}

//afterEvaluate {
//    project.publishing.publications.all {
        // rename artifacts
//        groupId = GROUP_ID
//        if (it.name.contains('metadata')) {
//            artifactId = "$ARTIFACT_ID"
//        } else {
//            artifactId = "$ARTIFACT_ID-$name"
//       }
//    }
//}

//def ISSUE_URL="https://github.com/natanfudge/KotlinAwesomePrinter/issues" // A link to an issue tracker for the library, in our example: "https://github.com/natanfudge/KotlinAwesomePrinter/issues"
//def SITE_URL="https://github.com/natanfudge/KotlinAwesomePrinter" // A link to the library's site. In our example: "https://github.com/natanfudge/KotlinAwesomePrinter"
//def VCS_URL="https://github.com/natanfudge/KotlinAwesomePrinter.git" // A link to the version control system (where the code is stored). In our example: "https://github.com/natanfudge/KotlinAwesomePrinter.git"

//
//afterEvaluate {
//    project.publishing.publications.all {
//        // rename artifacts
//        groupId = GROUP_ID
//        if (it.name.contains('metadata')) {
//            artifactId = "$ARTIFACT_ID"
//        } else {
//            artifactId = "$ARTIFACT_ID-$name"
//        }
//    }
//}
///*
//def getBintrayUserProperty() {
//    return hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
//}
//def getBintrayApiKeyProperty() {
//    return hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')
//}
// */
//
//bintray {
//    //print(getBintrayApiKeyProperty())
//    //A user name of bintray to A, and API key of Bintray to B.I do not want to include API Key in git,
//    // so I am gradle.properties writing locally.
//    // Gradle's property file is read in the order of gradle in the home directory> gradle in the project directory,
//    // so if it is written in property in the home directory, it will be useful for other projects as well.
//    //user = getBintrayUserProperty()
//    //key = getBintrayApiKeyProperty()
//    user = System.getenv("JFROG_ACTOR")
//    key = System.getenv("JFROG_TOKEN")
//
//    //f you set publish to true, the new version will be published the moment you upload to bintray. If false, it will not be published unless you press the publish button on the bintray web.
//    // It is recommended that you make it false because it can prevent an accident that you accidentally release the latest version.
//    publish = true
//
//    pkg {
//        repo = BINTRAY_REPOSITORY
//        name = ARTIFACT_ID
//        licenses = ['MIT']
//        //vcsUrl = VCS_URL
//        //websiteUrl = SITE_URL
//        //issueTrackerUrl = ISSUE_URL
//
//        version {
//            name = LIBRARY_VERSION_NAME
//            vcsTag = version
//            released = new Date()
//        }
//    }
//}
//
//// This specifies the publications to upload to bintray before doing the bintrayUpload gradle task.
////In the mpp configuration of one module after 1.3,
//// it is not uploaded unless you explicitly specify artifacts in publications like this.
//// It is not necessary to have the findAll part,
//// [project name]-kotlinMultiplatformbut a directory containing only pom files will be uploaded, so it is better to exclude it.
//bintrayUpload.doFirst {
//    publications = publishing.publications.collect {
//        it.name
//    }.findAll {
//        it != "sevenfacette-jvm"
//    }
//}
//
////The task of bintrayUpload depends on publishToMavenLocal set in the previous section.
//// This will create maven artifacts when running bintrayUplaod's task.
//bintrayUpload.dependsOn publishJvmPublicationToMavenLocal
//
//dokka {
//    outputDirectory = "$buildDir/dokka"
//    outputFormat = "html"
//
//    multiplatform {
//        customName { // The same name as in Kotlin Multiplatform plugin, so the sources are fetched automatically
//            includes = ['packages.md', 'extra.md']
//        }
//
//        differentName { // Different name, so source roots, classpath and platform must be passed explicitly.
//            targets = ["JVM"]
//            platform = "jvm"
//            sourceRoot {
//                path = kotlin.sourceSets.jvmMain.kotlin.srcDirs[0]
//            }
//            sourceRoot {
//                path = kotlin.sourceSets.commonMain.kotlin.srcDirs[0]
//            }
//        }
//    }
//}
//
//tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
//    kotlinOptions {
//        jvmTarget = "1.8"
//    }
//}
//
//tasks.detekt.jvmTarget = "1.8"
//
//task detektCommonMain(type: io.gitlab.arturbosch.detekt.Detekt) {
//    description = "Runs a failfast detekt build on the commonMain module"
//    ignoreFailures = true
//    setSource(files("$projectDir/src/commonMain/kotlin"))
//    config.setFrom(files("$projectDir/config/detekt/detekt.yml"))
//    reports {
//        html {
//            enabled = true
//            destination = file("$projectDir/detekt/commonMain-analysis.html")
//        }
//    }
//    include '**/*.kt'
//    include '**/*.kts'
//    exclude 'resources/'
//    exclude 'build/'
//}
//
//task detektJVMMain(type: io.gitlab.arturbosch.detekt.Detekt) {
//    description = "Runs a failfast detekt build on the jvmMain module"
//    ignoreFailures = true
//    setSource(files("$projectDir/src/jvmMain/kotlin"))
//    config.setFrom(files("$projectDir/config/detekt/detekt.yml"))
//    reports {
//        html {
//            enabled = true
//            destination = file("$projectDir/detekt/jvmMain-analysis.html")
//        }
//    }
//    include '**/*.kt'
//    include '**/*.kts'
//    exclude 'resources/'
//    exclude 'build/'
//}
//
//task detektJSMain(type: io.gitlab.arturbosch.detekt.Detekt) {
//    description = "Runs a failfast detekt build on the jsMain module"
//    ignoreFailures = true
//    setSource(files("$projectDir/src/jsMain/kotlin"))
//    config.setFrom(files("$projectDir/config/detekt/detekt.yml"))
//    reports {
//        html {
//            enabled = true
//            destination = file("$projectDir/detekt/jsMain-analysis.html")
//        }
//    }
//    include '**/*.kt'
//    include '**/*.kts'
//    exclude 'resources/'
//    exclude 'build/'
//}
